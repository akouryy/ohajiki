// Generated by CoffeeScript 1.7.1
var isArray;

isArray = function(x) {
  return x instanceof Array;
};

this.each = function(x, f) {
  var i, k, v, _i, _len;
  if (isArray(x)) {
    for (i = _i = 0, _len = x.length; _i < _len; i = ++_i) {
      v = x[i];
      f(v, i);
    }
  } else {
    for (k in x) {
      v = x[k];
      f(v, k);
    }
  }
};

this.map = function(x, f) {
  var i, k, o, v, _i, _len, _results;
  if (isArray(x)) {
    _results = [];
    for (i = _i = 0, _len = x.length; _i < _len; i = ++_i) {
      v = x[i];
      _results.push(f(v, i));
    }
    return _results;
  } else {
    o = {};
    for (k in x) {
      v = x[k];
      o[k] = f(v, k);
    }
    return o;
  }
};

this.filter = function(x, f) {
  var i, k, o, v, _i, _len, _results;
  if (isArray(x)) {
    _results = [];
    for (i = _i = 0, _len = x.length; _i < _len; i = ++_i) {
      v = x[i];
      if (f(v, i)) {
        _results.push(v);
      }
    }
    return _results;
  } else {
    o = {};
    for (k in x) {
      v = x[k];
      if (f(v, k)) {
        o[k] = v;
      }
    }
    return o;
  }
};

this.filterNot = function(x, f) {
  var i, k, o, v, _i, _len, _results;
  if (isArray(x)) {
    _results = [];
    for (i = _i = 0, _len = x.length; _i < _len; i = ++_i) {
      v = x[i];
      if (!f(v, i)) {
        _results.push(v);
      }
    }
    return _results;
  } else {
    o = {};
    for (k in x) {
      v = x[k];
      if (!f(v, k)) {
        o[k] = v;
      }
    }
    return o;
  }
};

this.find = function(x, y) {
  var i, k, v, _i, _len, _ref, _ref1;
  if (isArray(x)) {
    for (i = _i = 0, _len = x.length; _i < _len; i = ++_i) {
      v = x[i];
      if ((_ref = typeof y === "function" ? y(v, i) : void 0) != null ? _ref : y === v) {
        return v;
      }
    }
  } else {
    for (k in x) {
      v = x[k];
      if ((_ref1 = typeof y === "function" ? y(v, k) : void 0) != null ? _ref1 : y === v) {
        return v;
      }
    }
  }
};

this.findKey = function(x, f) {
  var i, k, v, _i, _len, _ref, _ref1;
  if (isArray(x)) {
    for (i = _i = 0, _len = x.length; _i < _len; i = ++_i) {
      v = x[i];
      if ((_ref = typeof y === "function" ? y(i, v) : void 0) != null ? _ref : y === i) {
        return v;
      }
    }
  } else {
    for (k in x) {
      v = x[k];
      if ((_ref1 = typeof y === "function" ? y(k, v) : void 0) != null ? _ref1 : y === k) {
        return v;
      }
    }
  }
};

String.prototype.replaceAll = function(from, to) {
  return this.replace(RegExp("" + from), to);
};

$.fn.addClassSVG = function(c) {
  $(this).attr('class', function(_, old_classes) {
    return old_classes + ' ' + c;
  });
  return this;
};

$.fn.removeClassSVG = function(c) {
  $(this).attr('class', function(_, old_classes) {
    return old_classes.replaceAll(c, '');
  });
  return this;
};
