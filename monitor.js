// Generated by CoffeeScript 1.7.1
$(function() {
  var Socket, StagePerCircle, StagePerStone, StoneNum, UserNum, VirtualStageSize, addStone, playing, ranking, setStoneNum, setStonePosition, waiting;
  UserNum = 4;
  StoneNum = 6;
  StagePerCircle = 4;
  StagePerStone = 40;
  VirtualStageSize = 7000;
  $(window).keydown(function(e) {
    switch (e.keyCode) {
      case 49:
        return waiting();
      case 50:
        return playing();
      case 51:
        return ranking([1000, 500, 5000, 500]);
      case 73:
        return $('body').addClass('info');
      case 27:
        return $('body').removeClass('info');
    }
  });
  $('#i').click(function() {
    return $('body').addClass('info');
  });
  $('#info-container').click(function() {
    return $('body').removeClass('info');
  });
  $('#info').click(function(ev) {
    return ev.stopPropagation();
  });
  addStone = function(i, j) {
    $('.stage-view').append($('#none .stone').clone().addClassSVG('u' + i).addClassSVG('u' + i + 's' + j));
  };
  setStoneNum = function(uid, s) {
    var $u;
    $u = $("#u" + uid);
    if (s === -1) {
      $u.data({
        stone: $u.data('stone') - 1
      });
    } else {
      $u.data({
        stone: s
      });
    }
    return $u.find('.user-stone .value').text($u.data('stone'));
  };
  setStonePosition = function(u, s, x, y) {
    var $s;
    $s = $('.u' + u + 's' + s);
    $s.removeClass('invisible');
    $s.data({
      x: x,
      y: y
    });
    return $s.css({
      left: 50 + 100 / VirtualStageSize * x - 100 / StagePerStone / 2 + '%',
      top: 50 + 100 / VirtualStageSize * y - 100 / StagePerStone / 2 + '%',
      display: 'block'
    });
  };
  Socket = io.connect("http://" + location.host + "/monitor", {
    resource: 'socket.io'
  });
  Socket.on('entry', waiting = function() {
    $('body').attr({
      id: 'waiting'
    });
    $('#sec').removeClass('value-few').find('.value').text(60);
    $('.user').each(function(i) {
      $(this).find('.user-type').addClass('no-p');
      $(this).find('.user-image').html($('#none .wait').clone());
      return $(this).find('.user-type>.value').text('Waiting...');
    });
    return $('.stage-view .stone').remove();
  });
  Socket.on('start', playing = function() {
    $('body').attr({
      id: 'playing'
    });
    return $('.user').each(function(i) {
      var j, _i;
      if ($(this).find('.user-type').hasClass('no-p')) {
        $(this).find('.user-image').html($('#none .ai-svg').clone());
        $(this).find('.user-type>.value').text('Computer');
      }
      setStoneNum(i, StoneNum);
      for (j = _i = 0; 0 <= StoneNum ? _i < StoneNum : _i > StoneNum; j = 0 <= StoneNum ? ++_i : --_i) {
        addStone(i, j);
      }
    });
  });
  Socket.on('result', ranking = function(scores) {
    var i, j, r, ranks, uniqRanks, _i, _j, _k, _l, _len, _len1, _ref;
    ranks = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= UserNum ? _i < UserNum : _i > UserNum; i = 0 <= UserNum ? ++_i : --_i) {
        _results.push(0);
      }
      return _results;
    })();
    uniqRanks = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= UserNum ? _i < UserNum : _i > UserNum; i = 0 <= UserNum ? ++_i : --_i) {
        _results.push(0);
      }
      return _results;
    })();
    $('#sec .value').text(0);
    for (i = _i = 0; 0 <= UserNum ? _i < UserNum : _i > UserNum; i = 0 <= UserNum ? ++_i : --_i) {
      for (j = _j = 0; 0 <= i ? _j < i : _j > i; j = 0 <= i ? ++_j : --_j) {
        if (scores[i] > scores[j]) {
          uniqRanks[j]++;
          ranks[j]++;
        }
        if (scores[i] === scores[j]) {
          uniqRanks[i]++;
        }
        if (scores[i] < scores[j]) {
          ranks[i]++;
          uniqRanks[i]++;
        }
      }
      $('#u' + i + ' .user-score .value').text(scores[i]);
    }
    for (i = _k = 0, _len = uniqRanks.length; _k < _len; i = ++_k) {
      r = uniqRanks[i];
      $('#u' + i).attr({
        'data-rank': r
      });
    }
    for (i = _l = 0, _len1 = ranks.length; _l < _len1; i = ++_l) {
      r = ranks[i];
      $('#u' + i + ' .rank .value').text(r + 1);
      $('#u' + i + ' .rank .th').text((_ref = ['st', 'nd', 'rd'][r]) != null ? _ref : 'th');
    }
    return $('body').attr({
      id: 'ranking'
    });
  });
  Socket.on('tick', function(sec) {
    $('#sec .value').text(sec);
    if (sec === 10) {
      return $('#sec').addClass('value-few');
    }
  });
  Socket.on('addStone', function(info) {
    setStoneNum(info.uid, -1);
    return setStonePosition(info.uid, info.sid, info.x, info.y);
  });
  Socket.on('moveStones', function(info) {
    var move, moveList, uid, _i, _len, _results;
    _results = [];
    for (uid = _i = 0, _len = info.length; _i < _len; uid = ++_i) {
      moveList = info[uid];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = moveList.length; _j < _len1; _j++) {
          move = moveList[_j];
          _results1.push(setStonePosition(uid, move.sid, move.x, move.y));
        }
        return _results1;
      })());
    }
    return _results;
  });
  Socket.on('deleteStones', function(sidLists) {
    var sid, sidList, uid, _i, _j, _len, _len1;
    for (uid = _i = 0, _len = sidLists.length; _i < _len; uid = ++_i) {
      sidList = sidLists[uid];
      for (_j = 0, _len1 = sidList.length; _j < _len1; _j++) {
        sid = sidList[_j];
        $('.u' + uid + 's' + sid).remove();
      }
    }
  });
  Socket.on('reconnect', function(stonesList) {
    var j, stone, uid, user, _i, _j, _k, _len, _len1, _ref;
    $('body').attr({
      id: 'playing'
    });
    $('.user').each(function(i) {
      return $(this).find('.user-image').html($('#none .ai-svg').clone());
    });
    for (uid = _i = 0, _len = stonesList.length; _i < _len; uid = ++_i) {
      user = stonesList[uid];
      setStoneNum(uid, StoneNum - user.stoneCount);
      for (j = _j = 0; 0 <= StoneNum ? _j < StoneNum : _j > StoneNum; j = 0 <= StoneNum ? ++_j : --_j) {
        addStone(uid, j);
      }
      _ref = user.stones;
      for (_k = 0, _len1 = _ref.length; _k < _len1; _k++) {
        stone = _ref[_k];
        setStonePosition(uid, stone.sid, stone.x, stone.y);
      }
    }
    $('#sec').removeClass('value-none').find('.value').text(60);
  });
  Socket.on('setPlayer', function(uid) {
    $("#u" + uid + " .user-image").html($('#none .player-svg').clone());
    $("#u" + uid + " .user-type").removeClass('no-p');
    return $("#u" + uid + " .user-type>.value").text('Player');
  });
  return Socket.on('unsetPlayer', function(uid) {
    if ($('body').is('#waiting')) {
      $("#u" + uid + " .user-image").html($('#none .wait').clone());
      $("#u" + uid + " .user-type>.value").text('Waiting...');
    } else if ($('body').is('#playing')) {
      $("#u" + uid + " .user-image").html($('#none .ai-svg').clone());
      $("#u" + uid + " .user-type>.value").text('Computer');
    }
    return $("#u" + uid + " .user-type").addClass('no-p');
  });
});
